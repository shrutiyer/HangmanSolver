{"name":"Project Scrabbalicious","tagline":"Investigates which AI wins a game of Scrabble","body":"# **ScrabbleAIs**\r\n_A project by Shruti Iyer, Meghan Tighe and Paul Krusell_\r\n\r\n# Project Proposal\r\n\r\n## The Big Idea:\r\nThe big idea is to create a scrabble game and then create multiple AIs to play each other and determine which one is better. We are thinking of making one AI that plans its moves ahead of time and one that impulsively just chooses the maximum points available at the time.\r\n\r\n## Learning Goals:\r\n* Paul: I want to learn about more efficient data structures that will allow our team to process huge numbers of words relatively quickly and efficiently. I think that this will be an important skill for this project and for many projects to come. I especially would love to get a better understanding of algorithms for solving puzzles like this.\r\n* Meghan: I would like to learn more about how to better structure my code and how to code with a team (including better use of Github). I also really like the idea of creating an algorithm that solves a problem. Although this project is specific to solving a game of hangman, I think algorithm building is a skill that would be applicable to many other projects.\r\n* Shruti: I would like to learn about the architecture of code and how it affects the efficiency and understanding of the code. I would also like to understand how to approach a new library and parse its syntax.\r\n\r\n## Implementation Plan:\r\nThe goal is to create a Scrabble AI with a smaller dictionary of words (about the size of 1000 words). We then plan to make two AIs to solve and play scrabble in two different ways. Initially, we just want an ASCII output of the board with Scrabble alphabets. We will build and test one working algorithm and then move to the second one. \r\n\r\n## Project Schedule:\r\n* Design Review (4/2):\r\nHave a completed, detailed overview of the code architecture\r\nPseudocode for the algorithms we will be trying \r\n* Code Review (4/13):\r\nWorking game\r\nAt least one rough but functioning algorithmz\r\n* Mid-Project Presentation (4/23):\r\nTwo fully functioning algorithms\r\n* Final Product (5/6):\r\nMake presentation look pretty.(GUI/Interactive visual interface?)\r\n\r\n## Collaboration Plan:\r\nWe plan to start out together, pair programming until we have a clear idea about the code architecture and then branch out. We will individually read up on documentation and then get together to pair program. Initially, there won’t be individual parts to work on until we get to the display/GUI portion of the project. \r\n\r\n## Risks:\r\nIt might end up taking a long time to run because our program will have to cycle through such a long list of words. We are trying to combat this risk by first starting with a more limited pool of words. We could also have some risks defining the board and the rules of the game because they may not translate well into code. Also, we may have trouble finding a way to make everything modular, making it difficult to put different AIs simply into the program.\r\n\r\n## Additional Course Content:\r\nLearn about code efficiency and how to improve the processing speed\r\nTips and tools for creating algorithms\r\n\r\n# Preparation and Framing\r\n\r\n## Background and context\r\nOur project consists of a Scrabble solver AI.\r\nThe game has two different algorithms play against each other. There will also be an option to have the user play against the two algorithms. \r\n\r\n##Key questions\r\n* Do you have any advice about code architecture? (Is this the best way for us to structure things?)\r\n* Do we have appropriate use of classes?\r\n* How should we keep track of tile locations? (Matrix? List?)\r\n* Should we use two algorithms with equally good features? Or should one of them be reasonably better than the other? \r\n* Do you have any cool algorithm /strategy ideas that we haven’t discussed?\r\n\r\n![UML Diagram](https://www.dropbox.com/sc/0jar358jel9ibbe/AAC3EUtIz1lbdJYR_rNKQoULa)\r\n\r\n## Agenda for technical review session\r\n* Discuss code overview/architecture\r\n* Discuss algorithms being used\r\n\r\n## Algorithms\r\n1. Permutations:\r\nFind all places where words could be made\r\nList all permutations with inventory letters\r\nCheck list for legal words\r\nPlay word with highest score\r\n2. “Human way”:\r\nSearch a dictionary for all words that could be made with inventory letters plus any one other letter\r\nSee if the one letter is on board, if word can be placed there\r\nPlay word with highest score\r\n3. Thinking ahead:\r\nDoes all the things that #1 does plus somehow thinks ahead.\r\nSaves high score letters for double/triple point spots?\r\nDoesn’t play U alone if also has Q in inventory?\r\nEtc.\r\n4. “Smart human way”:\r\nMakes list of all letters on board that could have a letter added (spatially, not legally)\r\nCycles through list: each time makes new alphabetized list that includes inventory plus the letter from board\r\nSearches all combinations of these letters as key in dictionary of all words, element in dictionary is the actual word\r\nPlay highest scoring legal word\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}